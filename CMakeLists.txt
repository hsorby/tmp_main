CMAKE_MINIMUM_REQUIRED(VERSION 2.4 FATAL_ERROR)
project(OpenCMISS)

# ==============================
# Initial setup instructions
# ==============================
option(OCM_DEVELOPER_MODE "Handle the packages as proper submodules. DEVELOPERS ONLY." ON)

option(BUILD_IRON "Build OpenCMISS-Iron" YES)
option(BUILD_ZINC "Build OpenCMISS-Iron" NO)

if (NOT CMAKE_BUILD_TYPE AND NOT WIN32)
    SET(CMAKE_BUILD_TYPE RELEASE)
    message(STATUS "No CMAKE_BUILD_TYPE has been defined. Using RELEASE.")
endif()

SET(OPENCMISS_UTILITIES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/utilities)
SET(OPENCMISS_DEPENDENCIES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/dependencies)
SET(OPENCMISS_INSTALL_PREFIX ${CMAKE_CURRENT_SOURCE_DIR}/install)

# Check utilities first (this ensures that CMake is new enough and other tools are available)
add_subdirectory(utilities)

# Make sure the localconfig file exists
if (NOT EXISTS ${CMAKE_CURRENT_LIST_DIR}/OpenCMISSLocalConfig.cmake)
    configure_file(${CMAKE_CURRENT_LIST_DIR}/OpenCMISSLocalConfig.default.cmake ${CMAKE_CURRENT_LIST_DIR}/OpenCMISSLocalConfig.cmake COPYONLY)
endif()

LIST(APPEND CMAKE_MODULE_PATH 
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${OPENCMISS_UTILITIES_DIR}/CMakeModules
    ${OPENCMISS_UTILITIES_DIR}/CMakeScripts)
include(OCMUtilsBuildMacros)
include(ExternalProject)

# Manual for now
SET(NEED_DEPENDENCIES YES)

SET(IRON_DEPS )
if (NEED_DEPENDENCIES)
    SET(OPENCMISS_DEPENDENCIES_BINARY_DIR ${OPENCMISS_DEPENDENCIES_DIR}/build)
    SET(PROJECT_CMAKE_ARGS )
    # As the CMAKE_ARGS are a list themselves, we need to treat the ; in the (possible) list of module_paths
	# specially. Therefore CMAKE has a special command $<SEMICOLON>
	STRING(REPLACE ";" "$<SEMICOLON>" CMAKE_MODULE_PATH_ESC "${CMAKE_MODULE_PATH}")
	LIST(APPEND PROJECT_CMAKE_ARGS
	    -DOPENCMISS_BUILD=YES
	    -DCMAKE_INSTALL_PREFIX:PATH=${OPENCMISS_INSTALL_PREFIX}
	    -DCMAKE_BUILD_TYPE:PATH=${CMAKE_BUILD_TYPE}
	    #-DBUILD_PRECISION=${BUILD_PRECISION}
	    #-DBUILD_TESTS=${BUILD_TESTS}
	    -DCMAKE_PREFIX_PATH=${OPENCMISS_DEPENDENCIES_DIR}/install/release/lib
	    -DCMAKE_MODULE_PATH=${CMAKE_MODULE_PATH_ESC}
	)
	
    GET_BUILD_COMMANDS(LOCAL_PLATFORM_BUILD_COMMAND LOCAL_PLATFORM_INSTALL_COMMAND ${OPENCMISS_DEPENDENCIES_BINARY_DIR})
    ExternalProject_Add(DEPENDENCIES
        PREFIX ${OPENCMISS_DEPENDENCIES_DIR}
		TMP_DIR ${OPENCMISS_DEPENDENCIES_BINARY_DIR}/ep_tmp
		STAMP_DIR ${OPENCMISS_DEPENDENCIES_BINARY_DIR}/ep_stamp
		#--Configure step-------------
		SOURCE_DIR ${OPENCMISS_DEPENDENCIES_DIR}
		BINARY_DIR ${OPENCMISS_DEPENDENCIES_DIR}/build
		CMAKE_ARGS ${PROJECT_CMAKE_ARGS}
		#--Build step-----------------
		BUILD_COMMAND ${LOCAL_PLATFORM_BUILD_COMMAND}
		INSTALL_COMMAND ""
	)
	LIST(APPEND IRON_DEPS DEPENDENCIES)
endif()

if (BUILD_IRON)
    SET(PROJECT_CMAKE_ARGS )
    # As the CMAKE_ARGS are a list themselves, we need to treat the ; in the (possible) list of module_paths
	# specially. Therefore CMAKE has a special command $<SEMICOLON>
	STRING(REPLACE ";" "$<SEMICOLON>" CMAKE_MODULE_PATH_ESC "${CMAKE_MODULE_PATH}")
	LIST(APPEND PROJECT_CMAKE_ARGS
	    -DCMAKE_INSTALL_PREFIX:PATH=${OPENCMISS_INSTALL_PREFIX}
	    -DCMAKE_BUILD_TYPE:PATH=${CMAKE_BUILD_TYPE}
	    #-DBUILD_PRECISION=${BUILD_PRECISION}
	    #-DBUILD_TESTS=${BUILD_TESTS}
	    -DCMAKE_PREFIX_PATH=${OPENCMISS_DEPENDENCIES_DIR}/install/release/lib
	    -DCMAKE_MODULE_PATH=${CMAKE_MODULE_PATH_ESC}
	)
	
    SET(PROJECT_FOLDER ${CMAKE_CURRENT_BINARY_DIR}/iron)
    GET_BUILD_COMMANDS(LOCAL_PLATFORM_BUILD_COMMAND LOCAL_PLATFORM_INSTALL_COMMAND ${PROJECT_FOLDER})
    ExternalProject_Add(IRON 
        DEPENDS ${IRON_DEPS}
        PREFIX ${PROJECT_FOLDER}
		TMP_DIR ${PROJECT_FOLDER}/ep_tmp
		STAMP_DIR ${PROJECT_FOLDER}/ep_stamp
		#--Download step--------------
		DOWNLOAD_DIR ${PROJECT_FOLDER}/ep_dl
        ${USERMODE_DOWNLOAD_CMDS}
		#--Configure step-------------
		SOURCE_DIR ${OpenCMISS_SOURCE_DIR}/iron
		BINARY_DIR ${PROJECT_FOLDER}
		CMAKE_ARGS ${PROJECT_CMAKE_ARGS}
		#--Build step-----------------
		BUILD_COMMAND ${LOCAL_PLATFORM_BUILD_COMMAND}
		#--Install step---------------
		INSTALL_COMMAND ${LOCAL_PLATFORM_INSTALL_COMMAND}
	)
	if (OCM_DEVELOPER_MODE)
	    #ADD_SUBMODULE_CHECKOUT_STEPS(IRON ${OpenCMISS_SOURCE_DIR} iron NO)
    endif()
endif()